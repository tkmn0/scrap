{"version":3,"sources":["webpack:///path---01132018-unirx-01-78a1cdd533410d9a5539.js","webpack:///./.cache/json/01132018-unirx-01.json"],"names":["webpackJsonp","378","module","exports","data","site","meta","title","description","url","author","twitter","adsense","post","id","html","frontmatter","layout","path","categories","date","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,MAAQC,MAAA,QAAAC,YAAA,eAAAC,IAAA,iCAAAC,OAAA,KAAAC,QAAA,KAAAC,QAAA,KAA+HC,MAASC,GAAA,iJAAAC,KAAA,oiEAAAC,aAAotEC,OAAA,OAAAV,MAAA,iBAAAW,KAAA,sBAAAC,YAAA,MAAAC,KAAA,gBAAgHC,aAAgBH,KAAA","file":"path---01132018-unirx-01-78a1cdd533410d9a5539.js","sourcesContent":["webpackJsonp([254467931983930],{\n\n/***/ 378:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"meta\":{\"title\":\"n0の断片\",\"description\":\"メモとか、スニペットとか\",\"url\":\"https://tkmn0.github.io/scrap/\",\"author\":\"n0\",\"twitter\":\"n0\",\"adsense\":\"\"}},\"post\":{\"id\":\"/Users/noguchitakuma/Desktop/n0WorkSapace/techblog/blog/src/pages/articles/01132018/Unirxを触ってみる（１）/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Reacive Extentions の一つであるUniRxを触ってみる。</p>\\n<!--more-->\\n<h2>UniRxとは?</h2>\\n<hr>\\n<p>neuecc さんによるUnity用のRxライブらりなのだ(小並感)<br>\\n<a href=\\\"https://github.com/neuecc/UniRx\\\">Unirxのgithub</a>\\n以下、README.mdを読んでいきましょう。<br>\\n「UniRxって何?」 て聞かれた時のために。</p>\\n<h2>README.md (!原文ママ)</h2>\\n<hr>\\n<blockquote>\\n<p>UniRx (Reactive Extensions for Unity) is a reimplementation of the .NET Reactive Extensions. The Official Rx implementation is great but doesn’t work on Unity and has issues with iOS IL2CPP compatibility.</p>\\n</blockquote>\\n<ul>\\n<li>UniRxは .Net用のリアクティブエクステンションを再実装したものだと。</li>\\n<li>公式の.Net用のも素晴らしいけど、Unityで動かないし、iOSと、IL2CPPでビルドした時に問題があるからね。</li>\\n</ul>\\n<blockquote>\\n<p>Supported platforms are PC/Mac/Android/iOS/WP8/WindowsStore/etc and the library is fully supported on both Unity 5 and 4.6.</p>\\n</blockquote>\\n<ul>\\n<li>Unityにフォーカスしてるし、いろんなプラットフォームをサポートしてるで。</li>\\n</ul>\\n<blockquote>\\n<p>UniRx is available on the Unity Asset Store (FREE) - <a href=\\\"http://u3d.as/content/neuecc/uni-rx-reactive-extensions-for-unity/7tT\\\">http://u3d.as/content/neuecc/uni-rx-reactive-extensions-for-unity/7tT</a></p>\\n</blockquote>\\n<ul>\\n<li>Asset storeから”無料で”入手可。</li>\\n</ul>\\n<p>うーんと、Reactive Extentionがどういうものかは知ってる前提なんですかね?<br>\\nちなみに、READMEはこの後サンプルが続きます。</p>\\n<h2>Reactive Extentions とは</h2>\\n<hr>\\n<p> 困った時のwikipediaっすね。</p>\\n<p> wikipediaをかいつまむと以下です。<br>\\n</p>\\n<ul>\\n<li>オブザーバーパターンによる、非同期処理のAPIのことであると.</li>\\n<li>非同期処理っつーのは,基本的には”call back”を持つもので、プログラマは関数の終了時にコールバックできるよね。</li>\\n<li>この方法はオーバーヘッドを避けれるからいいよねーと。</li>\\n</ul>\\n<p><code>オブザーバーパターン</code>: 監視するパターン(Rx Extentionにおいては、ストリームの監視な気がします。)<br>\\n<code>オーバーヘッド</code>: 余分な処理による負荷</p>\\n<ul>\\n<li>\\n<p>ストリームは以下の3つのイベント時に、それぞれの値を発行しますと。</p>\\n<ul>\\n<li>next</li>\\n<li>error</li>\\n<li>complete</li>\\n</ul>\\n</li>\\n<li>\\n<p>ストリームが購読(これがオブザーバーパターンたる所以ですかね?)されていない限りは、上記の値に対するイベントは発行されません。    </p>\\n</li>\\n</ul>\\n<p>めっちゃ感覚的にかつ、小学生並みの感想といたしましては、    </p>\\n<p><code>痒いところに手が届いて、言語仕様とマッチするコールバック、あ、これを求めてたんですよぉ</code><br>\\n<br>\\nと言いたいです。</p>\\n<p>購読さえしていれば、nextとして任意の値をストリームに流すと、購読していたイベントを、任意のタイミングで、複数回呼べるのがとても便利です。</p>\\n<p>次回から、コードをみていきましょう。</p>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"Unirxを触ってみる（１）\",\"path\":\"/01132018/unirx_01/\",\"categories\":[null],\"date\":\"2018/01/13\"}}},\"pathContext\":{\"path\":\"/01132018/unirx_01/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---01132018-unirx-01-78a1cdd533410d9a5539.js","module.exports = {\"data\":{\"site\":{\"meta\":{\"title\":\"n0の断片\",\"description\":\"メモとか、スニペットとか\",\"url\":\"https://tkmn0.github.io/scrap/\",\"author\":\"n0\",\"twitter\":\"n0\",\"adsense\":\"\"}},\"post\":{\"id\":\"/Users/noguchitakuma/Desktop/n0WorkSapace/techblog/blog/src/pages/articles/01132018/Unirxを触ってみる（１）/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Reacive Extentions の一つであるUniRxを触ってみる。</p>\\n<!--more-->\\n<h2>UniRxとは?</h2>\\n<hr>\\n<p>neuecc さんによるUnity用のRxライブらりなのだ(小並感)<br>\\n<a href=\\\"https://github.com/neuecc/UniRx\\\">Unirxのgithub</a>\\n以下、README.mdを読んでいきましょう。<br>\\n「UniRxって何?」 て聞かれた時のために。</p>\\n<h2>README.md (!原文ママ)</h2>\\n<hr>\\n<blockquote>\\n<p>UniRx (Reactive Extensions for Unity) is a reimplementation of the .NET Reactive Extensions. The Official Rx implementation is great but doesn’t work on Unity and has issues with iOS IL2CPP compatibility.</p>\\n</blockquote>\\n<ul>\\n<li>UniRxは .Net用のリアクティブエクステンションを再実装したものだと。</li>\\n<li>公式の.Net用のも素晴らしいけど、Unityで動かないし、iOSと、IL2CPPでビルドした時に問題があるからね。</li>\\n</ul>\\n<blockquote>\\n<p>Supported platforms are PC/Mac/Android/iOS/WP8/WindowsStore/etc and the library is fully supported on both Unity 5 and 4.6.</p>\\n</blockquote>\\n<ul>\\n<li>Unityにフォーカスしてるし、いろんなプラットフォームをサポートしてるで。</li>\\n</ul>\\n<blockquote>\\n<p>UniRx is available on the Unity Asset Store (FREE) - <a href=\\\"http://u3d.as/content/neuecc/uni-rx-reactive-extensions-for-unity/7tT\\\">http://u3d.as/content/neuecc/uni-rx-reactive-extensions-for-unity/7tT</a></p>\\n</blockquote>\\n<ul>\\n<li>Asset storeから”無料で”入手可。</li>\\n</ul>\\n<p>うーんと、Reactive Extentionがどういうものかは知ってる前提なんですかね?<br>\\nちなみに、READMEはこの後サンプルが続きます。</p>\\n<h2>Reactive Extentions とは</h2>\\n<hr>\\n<p> 困った時のwikipediaっすね。</p>\\n<p> wikipediaをかいつまむと以下です。<br>\\n</p>\\n<ul>\\n<li>オブザーバーパターンによる、非同期処理のAPIのことであると.</li>\\n<li>非同期処理っつーのは,基本的には”call back”を持つもので、プログラマは関数の終了時にコールバックできるよね。</li>\\n<li>この方法はオーバーヘッドを避けれるからいいよねーと。</li>\\n</ul>\\n<p><code>オブザーバーパターン</code>: 監視するパターン(Rx Extentionにおいては、ストリームの監視な気がします。)<br>\\n<code>オーバーヘッド</code>: 余分な処理による負荷</p>\\n<ul>\\n<li>\\n<p>ストリームは以下の3つのイベント時に、それぞれの値を発行しますと。</p>\\n<ul>\\n<li>next</li>\\n<li>error</li>\\n<li>complete</li>\\n</ul>\\n</li>\\n<li>\\n<p>ストリームが購読(これがオブザーバーパターンたる所以ですかね?)されていない限りは、上記の値に対するイベントは発行されません。    </p>\\n</li>\\n</ul>\\n<p>めっちゃ感覚的にかつ、小学生並みの感想といたしましては、    </p>\\n<p><code>痒いところに手が届いて、言語仕様とマッチするコールバック、あ、これを求めてたんですよぉ</code><br>\\n<br>\\nと言いたいです。</p>\\n<p>購読さえしていれば、nextとして任意の値をストリームに流すと、購読していたイベントを、任意のタイミングで、複数回呼べるのがとても便利です。</p>\\n<p>次回から、コードをみていきましょう。</p>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"Unirxを触ってみる（１）\",\"path\":\"/01132018/unirx_01/\",\"categories\":[null],\"date\":\"2018/01/13\"}}},\"pathContext\":{\"path\":\"/01132018/unirx_01/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/01132018-unirx-01.json\n// module id = 378\n// module chunks = 254467931983930"],"sourceRoot":""}