{"version":3,"sources":["webpack:///path---01222018-uni-rx-02-64ec522e0655e8c0f3e9.js","webpack:///./.cache/json/01222018-uni-rx-02.json"],"names":["webpackJsonp","380","module","exports","data","site","meta","title","description","url","author","twitter","adsense","post","id","html","frontmatter","layout","path","categories","date","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,MAAQC,MAAA,QAAAC,YAAA,eAAAC,IAAA,iCAAAC,OAAA,KAAAC,QAAA,KAAAC,QAAA,KAA+HC,MAASC,GAAA,iJAAAC,KAAA,urPAAilQC,aAAwFC,OAAA,OAAAV,MAAA,iBAAAW,KAAA,sBAAAC,YAAA,sBAAAC,KAAA,gBAAgIC,aAAgBH,KAAA","file":"path---01222018-uni-rx-02-64ec522e0655e8c0f3e9.js","sourcesContent":["webpackJsonp([40833295431180],{\n\n/***/ 380:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"meta\":{\"title\":\"n0の断片\",\"description\":\"メモとか、スニペットとか\",\"url\":\"https://tkmn0.github.io/scrap/\",\"author\":\"n0\",\"twitter\":\"n0\",\"adsense\":\"\"}},\"post\":{\"id\":\"/Users/noguchitakuma/Desktop/n0WorkSapace/techblog/blog/src/pages/articles/01222018/Unirxを触ってみる（2）/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>今回から実際にコードを書いて動かしてみようと思います。</p>\\n<!--more-->\\n<h3>アセットストアからUniRxをインポート</h3>\\n<hr>\\n<p>アセットストアですぐに見つかります。\\n<br>\\n追加したら, <code>using</code>を忘れずに。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">using</span> UniRx<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Subjectを使ってみる。</h3>\\n<hr>\\n<p>ストリームソースとなりうるものです。\\n初期化はこんな感じで,</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>Subject<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> hogehoge <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Subject</span><span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>例えば    </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>Subject<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token operator\\\">></span> text <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Subject</span><span class=\\\"token operator\\\">&lt;</span>stirng<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>上記の例だと、string の値が流れてくるストリームソースの作成に成功です。\\n</p>\\n<p>ストリームに値が流れたときの処理は,\\n<br>\\n<code>Subscribe();</code><br>\\nを使います。\\nストリームに値を流すときは,\\n<br>\\n<code>onNext();</code>\\n<br>\\nで流せます。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">using</span> UnityEngine<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">using</span> UnityEngine<span class=\\\"token punctuation\\\">.</span>Events<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">using</span> UniRx<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">FirstSceneController</span> <span class=\\\"token punctuation\\\">:</span> MonoBehaviour\\n<span class=\\\"token punctuation\\\">{</span>\\n    Subject<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token operator\\\">></span> text <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Subject</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// Use this for initialization</span>\\n    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">Start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        text\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Subscribe</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> Debug<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Log</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        text<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">OnNext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"hello, Subject\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Start 関数内で、購読の処理(subscribe)とストリームに値を流す処理を書いています。<br>\\nこの後、onNext は値を変えたり、呼ぶタイミングを変えたりしながら、Subject が破棄されるまで何回でも呼ぶことができます。</p>\\n<h3>click eventをストリームにしてみる。</h3>\\n<hr>\\n<p>UniRx を使えば、uGUI のクリック処理を以下のように書くことができます。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">using</span> UnityEngine<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">using</span> UnityEngine<span class=\\\"token punctuation\\\">.</span>UI<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">using</span> UniRx<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">FirstSceneController</span> <span class=\\\"token punctuation\\\">:</span> MonoBehaviour\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>SerializeField<span class=\\\"token punctuation\\\">]</span> Button button01<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// Use this for initialization</span>\\n    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">Start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        button01<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">OnClickAsObservable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Subscribe</span><span class=\\\"token punctuation\\\">(</span>\\n                _ <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> Debug<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"clicked\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>ストリームに値が入っていないときは<br>\\n<code>_ =></code><br>\\nとするのが通例のようです。\\nこれだけで、シーン上にあるボタンがクリックされたときに、ログを出力できます。\\n<br>\\n例えば、ログだけじゃなく、数行にわたる処理を書きたいときは,    </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Subscribe</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> Debug<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"clicked\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>の部分を,    </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Subscribe</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>    \\n    Debug<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"log1\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    \\n    Debug<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"log2\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>としてあげれば複数行の処理を記述することができます。</p>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"Unirxを触ってみる（2）\",\"path\":\"/01222018/UniRx_02/\",\"categories\":[\"C#\",\"Unity\",\"UniRx\"],\"date\":\"2018/01/22\"}}},\"pathContext\":{\"path\":\"/01222018/UniRx_02/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---01222018-uni-rx-02-64ec522e0655e8c0f3e9.js","module.exports = {\"data\":{\"site\":{\"meta\":{\"title\":\"n0の断片\",\"description\":\"メモとか、スニペットとか\",\"url\":\"https://tkmn0.github.io/scrap/\",\"author\":\"n0\",\"twitter\":\"n0\",\"adsense\":\"\"}},\"post\":{\"id\":\"/Users/noguchitakuma/Desktop/n0WorkSapace/techblog/blog/src/pages/articles/01222018/Unirxを触ってみる（2）/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>今回から実際にコードを書いて動かしてみようと思います。</p>\\n<!--more-->\\n<h3>アセットストアからUniRxをインポート</h3>\\n<hr>\\n<p>アセットストアですぐに見つかります。\\n<br>\\n追加したら, <code>using</code>を忘れずに。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">using</span> UniRx<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>Subjectを使ってみる。</h3>\\n<hr>\\n<p>ストリームソースとなりうるものです。\\n初期化はこんな感じで,</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>Subject<span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span> hogehoge <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Subject</span><span class=\\\"token operator\\\">&lt;</span>T<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>例えば    </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>Subject<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token operator\\\">></span> text <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Subject</span><span class=\\\"token operator\\\">&lt;</span>stirng<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>上記の例だと、string の値が流れてくるストリームソースの作成に成功です。\\n</p>\\n<p>ストリームに値が流れたときの処理は,\\n<br>\\n<code>Subscribe();</code><br>\\nを使います。\\nストリームに値を流すときは,\\n<br>\\n<code>onNext();</code>\\n<br>\\nで流せます。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">using</span> UnityEngine<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">using</span> UnityEngine<span class=\\\"token punctuation\\\">.</span>Events<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">using</span> UniRx<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">FirstSceneController</span> <span class=\\\"token punctuation\\\">:</span> MonoBehaviour\\n<span class=\\\"token punctuation\\\">{</span>\\n    Subject<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token operator\\\">></span> text <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Subject</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token keyword\\\">string</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// Use this for initialization</span>\\n    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">Start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        text\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Subscribe</span><span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> Debug<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Log</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        text<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">OnNext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"hello, Subject\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Start 関数内で、購読の処理(subscribe)とストリームに値を流す処理を書いています。<br>\\nこの後、onNext は値を変えたり、呼ぶタイミングを変えたりしながら、Subject が破棄されるまで何回でも呼ぶことができます。</p>\\n<h3>click eventをストリームにしてみる。</h3>\\n<hr>\\n<p>UniRx を使えば、uGUI のクリック処理を以下のように書くことができます。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">using</span> UnityEngine<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">using</span> UnityEngine<span class=\\\"token punctuation\\\">.</span>UI<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">using</span> UniRx<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">FirstSceneController</span> <span class=\\\"token punctuation\\\">:</span> MonoBehaviour\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>SerializeField<span class=\\\"token punctuation\\\">]</span> Button button01<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// Use this for initialization</span>\\n    <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">Start</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        button01<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">OnClickAsObservable</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Subscribe</span><span class=\\\"token punctuation\\\">(</span>\\n                _ <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> Debug<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"clicked\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>ストリームに値が入っていないときは<br>\\n<code>_ =></code><br>\\nとするのが通例のようです。\\nこれだけで、シーン上にあるボタンがクリックされたときに、ログを出力できます。\\n<br>\\n例えば、ログだけじゃなく、数行にわたる処理を書きたいときは,    </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Subscribe</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> Debug<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"clicked\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>の部分を,    </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Subscribe</span><span class=\\\"token punctuation\\\">(</span>_ <span class=\\\"token operator\\\">=</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>    \\n    Debug<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"log1\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    \\n    Debug<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"log2\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>としてあげれば複数行の処理を記述することができます。</p>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"Unirxを触ってみる（2）\",\"path\":\"/01222018/UniRx_02/\",\"categories\":[\"C#\",\"Unity\",\"UniRx\"],\"date\":\"2018/01/22\"}}},\"pathContext\":{\"path\":\"/01222018/UniRx_02/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/01222018-uni-rx-02.json\n// module id = 380\n// module chunks = 40833295431180"],"sourceRoot":""}